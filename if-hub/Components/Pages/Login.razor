@page "/login"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@using if_hub.Auth
@using if_hub.ViewModels
@using System.Net.Http.Headers
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Login - iF-Hub</PageTitle>

<div class="flex flex-col items-center">
    <div class="w-full max-w-2xl">
        <div class="text-center mb-8">
            <h1 class="text-3xl font-bold text-[#222831]">Bem-vindo de Volta!</h1>
            <p class="meta-text mt-2">Acesse sua conta para continuar.</p>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg relative mb-6" role="alert">
                <strong class="font-bold">Erro: </strong>
                <span class="block sm:inline">@errorMessage</span>
            </div>
        }

        <article class="topic-card bg-white p-6 sm:p-8 rounded-xl shadow-lg">
            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />

                <div class="space-y-6">
                    <div>
                        <label for="email" class="block mb-2 text-sm font-medium text-gray-900">Email</label>
                        <InputText id="email" type="email" @bind-Value="loginModel.Email" class="w-full px-4 py-2 border search-input rounded-lg focus:ring-2 outline-none transition" placeholder="seu.email@exemplo.com" />
                        <ValidationMessage For="@(() => loginModel.Email)" />
                    </div>

                    <div>
                        <label for="senha" class="block mb-2 text-sm font-medium text-gray-900">Senha</label>
                        <InputText id="senha" type="password" @bind-Value="loginModel.Senha" class="w-full px-4 py-2 border search-input rounded-lg focus:ring-2 outline-none transition" placeholder="••••••••" />
                        <ValidationMessage For="@(() => loginModel.Senha)" />
                    </div>

                    <button type="submit" class="create-topic-button font-semibold py-3 px-6 rounded-lg shadow-md hover:shadow-lg transition duration-150 flex items-center justify-center w-full">
                        <span>Entrar</span>
                    </button>
                </div>
            </EditForm>
        </article>

        <div class="text-center mt-6">
            <p class="text-sm meta-text">
                Não tem uma conta?
                <a href="/register" class="font-medium topic-title-link transition duration-150">Crie uma agora</a>
            </p>
        </div>
    </div>
</div>


@code {
    private LoginViewModel loginModel = new();
    private string? errorMessage;

    private class LoginResponse
    {
        public string? Token { get; set; }
    }

    private async Task HandleLogin()
    {
        try
        {
            errorMessage = null;

            // 1. Chamar a API de login
            var response = await Http.PostAsJsonAsync("/api/auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                // 2. Ler a resposta e extrair o token
                var loginResponse = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (loginResponse?.Token != null)
                {
                    // 3. Salvar o token no localStorage do navegador
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", loginResponse.Token);

                    // 4. Notificar a aplicação que o estado de autenticação mudou
                    ((CustomAuthenticationStateProvider)AuthStateProvider).NotifyUserAuthentication(loginResponse.Token);

                    // 5. Navegar para a página inicial (sem forçar o recarregamento)
                    Navigation.NavigateTo("/");
                }
            }
            else
            {
                // Exibe uma mensagem de erro se o login falhar
                errorMessage = "Credenciais inválidas. Tente novamente.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ocorreu um erro de conexão: {ex.Message}";
        }
    }
}