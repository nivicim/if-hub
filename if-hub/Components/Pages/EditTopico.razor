@page "/topics/edit/{TopicId:int}"
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using if_hub.ViewModels
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Editando Tópico</PageTitle>

@if (topicModel == null)
{
    <p><em>Carregando tópico para edição...</em></p>
}
else
{
    <div class="w-full max-w-4xl mx-auto">
        <h1 class="text-3xl font-bold text-[#222831] mb-6">Editando Tópico</h1>

        <article class="topic-card bg-white p-6 sm:p-8 rounded-xl shadow-lg">
            <EditForm Model="topicModel" OnValidSubmit="HandleUpdateTopic">
                <DataAnnotationsValidator />

                <div class="space-y-6">
                    <div>
                        <label for="titulo" class="block mb-2 text-sm font-medium text-gray-900">Título</label>
                        <InputText id="titulo" @bind-Value="topicModel.Titulo" class="w-full px-4 py-2 border search-input rounded-lg focus:ring-2 outline-none transition" />
                        <ValidationMessage For="@(() => topicModel.Titulo)" />
                    </div>

                    <div>
                        <label for="conteudo" class="block mb-2 text-sm font-medium text-gray-900">Conteúdo</label>
                        <InputTextArea id="conteudo" @bind-Value="topicModel.Conteudo" class="w-full px-4 py-2 border search-input rounded-lg focus:ring-2 outline-none transition" rows="10" />
                        <ValidationMessage For="@(() => topicModel.Conteudo)" />
                    </div>

                    <div class="flex gap-4">
                        <button type="submit" class="create-topic-button font-semibold py-3 px-6 rounded-lg shadow-md hover:shadow-lg transition duration-150 flex-grow">
                            <span>Salvar Alterações</span>
                        </button>
                        <a href="@($"/topics/{TopicId}")" class="button-login font-semibold py-3 px-6 rounded-lg shadow-md hover:shadow-lg transition duration-150">
                            Cancelar
                        </a>
                    </div>
                </div>
            </EditForm>
        </article>
    </div>
}

@code {
    [Parameter]
    public int TopicId { get; set; }

    private UpdateTopicViewModel topicModel = new();

    // No carregamento, buscamos os dados atuais do tópico para preencher o formulário
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var currentTopic = await Http.GetFromJsonAsync<TopicDetailViewModel>($"/api/topicos/{TopicId}");
            if (currentTopic != null)
            {
                // Preenchemos o ViewModel com os dados do tópico a ser editado
                topicModel.Titulo = currentTopic.Titulo;
                topicModel.Conteudo = currentTopic.Conteudo;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar tópico para edição: {ex.Message}");
        }
    }

    private async Task HandleUpdateTopic()
    {
        try
        {
            // Pegamos o token para autenticar a requisição
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (string.IsNullOrEmpty(token)) return;

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            // Enviamos a requisição PUT com os dados atualizados
            var response = await Http.PutAsJsonAsync($"/api/topicos/{TopicId}", topicModel);

            Http.DefaultRequestHeaders.Authorization = null;

            if (response.IsSuccessStatusCode)
            {
                // Se funcionou, volta para a página do tópico
                Navigation.NavigateTo($"/topics/{TopicId}");
            }
            else
            {
                Console.WriteLine("Erro ao atualizar o tópico. Status: " + response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao conectar com a API: {ex.Message}");
        }
    }
}